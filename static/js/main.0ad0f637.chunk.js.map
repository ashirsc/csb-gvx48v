{"version":3,"sources":["App.tsx","index.tsx"],"names":["Parser","require","App","useState","fileData","setFileData","index","setIndex","apiUrl","address","ADDRESS","replace","CITY","STATE","ZIP","useKeypress","console","log","SOLAR","className","type","name","onChange","ent","f","target","files","r","FileReader","onload","e","a","contents","result","csv","fromString","toString","json","indexStart","readAsText","alert","required","length","src","alt","onClick","opts","fields","parse","err","error","blob","Blob","saveAs","rootElement","document","getElementById","render"],"mappings":"qPAOQA,EAAWC,EAAQ,IAAnBD,OAUO,SAASE,IAAO,IAAD,QAC5B,EAAgCC,mBAA0B,IAA1D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA0BF,oBAAU,GAApC,mBAAOG,EAAP,KAAcC,EAAd,KAEIC,EACF,wFACIC,EAAUL,EAASE,GACzBE,GAAM,yBAAeC,QAAf,IAAeA,OAAf,EAAeA,EAASC,QAAQC,QAAQ,IAAK,KAA7C,mBAAqDF,QAArD,IAAqDA,OAArD,EAAqDA,EAASG,KAA9D,mBACJH,QADI,IACJA,OADI,EACJA,EAASI,MADL,mBAEFJ,QAFE,IAEFA,OAFE,EAEFA,EAASK,KACbN,GAAU,+CAgFV,OAXAO,YAAY,CAAC,IAAK,MAAM,WACtBC,QAAQC,IAAI,YACZb,EAASE,GAAOY,OAAQ,EACxBX,EAASD,EAAQ,MAEnBS,YAAY,CAAC,IAAK,UAAU,WAC1BC,QAAQC,IAAI,qBACZb,EAASE,GAAOY,OAAQ,EACxBX,EAASD,EAAQ,MAIjB,sBAAKa,UAAU,MAAf,UACE,kDACA,+FACCb,EAAQ,GACP,uBAAOc,KAAK,OAAOC,KAAK,OAAOC,SAnFpB,SAACC,GAChB,IAAIC,EAAID,EAAIE,OAAOC,MAAM,GAEzB,GAAIF,EAAG,CACL,IAAIG,EAAI,IAAIC,WACZD,EAAEE,OAAF,uCAAW,WAAgBC,GAAhB,uBAAAC,EAAA,6DACLC,EADK,OACMF,QADN,IACMA,GADN,UACMA,EAAGL,cADT,aACM,EAAWQ,OADjB,SAGUC,MAAMC,WAAN,iBAAiBH,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAUI,kBAA3B,QAAyC,IAHnD,OAOT,IAJMC,EAHG,OAITrB,QAAQC,IAAI,aAAcoB,GAC1BhC,EAAYgC,GACRC,EAAa,EACVD,EAAKC,GAAYpB,OACtBoB,IAEF/B,EAAS+B,GAVA,2CAAX,sDAYAX,EAAEY,WAAWf,QAEbgB,MAAM,wBAgE+CC,UAAQ,KAEjD,IAAXnC,GAAgBA,EAAQF,EAASsC,QAChC,qCACE,uBACA,wCACGtC,EAASE,UADZ,aACG,EAAiBI,QAClB,uBAFF,UAGGN,EAASE,UAHZ,aAGG,EAAiBM,KAHpB,eAG4BR,EAASE,UAHrC,aAG4B,EAAiBO,MAAO,IAHpD,UAIGT,EAASE,UAJZ,aAIG,EAAiBQ,OAEpB,qBAAK6B,IAAKnC,EAAQoC,IAAI,cAGzBtC,GAAS,GACR,gCACE,uBACA,wBAAQuC,QA7EQ,WAEtB,IA6BIX,EAFEY,EAAO,CAAEC,OA3BA,CASb,aACA,OACA,QACA,SACA,QACA,UACA,UACA,OACA,QACA,MACA,OACA,OACA,UACA,SACA,SACA,UAMF,IAEEb,EADe,IAAIlC,EAAO8C,GACbE,MAAM5C,GACnBY,QAAQC,IAAIiB,GACZ,MAAOe,GACPjC,QAAQkC,MAAMD,GAGhB,IAAIE,EAAO,IAAIC,KAAK,CAAClB,GAAM,CAAEd,KAAM,6BACnCiC,iBAAOF,EAAM,gBAoCP,4BC7HV,IAAMG,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,cAACvD,EAAD,IAASoD,K","file":"static/js/main.0ad0f637.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React, { useState } from \"react\";\nimport csv from \"csvtojson\";\n// @ts-ignore\nimport useKeypress from \"react-use-keypress\";\n// @ts-ignore\nimport { saveAs } from \"file-saver\";\nconst { Parser } = require(\"json2csv\");\n\ninterface StreetAddress {\n  ADDRESS: string;\n  CITY: string;\n  STATE: string;\n  ZIP: string;\n  SOLAR: boolean;\n}\n\nexport default function App() {\n  const [fileData, setFileData] = useState<StreetAddress[]>([]);\n  const [index, setIndex] = useState(-1);\n\n  let apiUrl =\n    \"https://maps.googleapis.com/maps/api/staticmap?maptype=satellite&zoom=20&size=240x240\";\n  const address = fileData[index];\n  apiUrl += `&center=${address?.ADDRESS.replace(\" \", \"+\")},${address?.CITY},${\n    address?.STATE\n  },${address?.ZIP}`;\n  apiUrl += \"&key=AIzaSyCHGHkeuL7t3vWUtSzbOmBLCviUCfrIxvg\";\n\n  const loadFile = (ent: any) => {\n    var f = ent.target.files[0];\n\n    if (f) {\n      var r = new FileReader();\n      r.onload = async function (e) {\n        var contents = e?.target?.result;\n\n        const json = await csv().fromString(contents?.toString() ?? \"\");\n        console.log(\"found data\", json);\n        setFileData(json);\n        let indexStart = 0;\n        while (json[indexStart].SOLAR) {\n          indexStart++;\n        }\n        setIndex(indexStart);\n      };\n      r.readAsText(f);\n    } else {\n      alert(\"Failed to load file\");\n    }\n  };\n\n  const downloadResults = () => {\n    // const keys = Object.keys(fileData[0]);\n    const fields = [\n      // \"add1\",\n      // \"add2\",\n      // \"city\",\n      // \"state\",\n      // \"zip\",\n      // \"creditScore\",\n      // \"hasSolar\"\n\n      \"SALUTATION\",\n      \"NAME\",\n      \"FNAME\",\n      \"MINAME\",\n      \"LNAME\",\n      \"LNAMESF\",\n      \"ADDRESS\",\n      \"CITY\",\n      \"STATE\",\n      \"ZIP\",\n      \"ZIP4\",\n      \"ZIP9\",\n      \"CNTYDSC\",\n      \"CRCODE\",\n      \"DLVPBC\",\n      \"SOLAR\"\n    ];\n\n    const opts = { fields };\n\n    let csv;\n    try {\n      const parser = new Parser(opts);\n      csv = parser.parse(fileData);\n      console.log(csv);\n    } catch (err) {\n      console.error(err);\n    }\n\n    var blob = new Blob([csv], { type: \"text/plain;charset=utf-8\" });\n    saveAs(blob, \"results.csv\");\n  };\n\n  useKeypress([\"n\", \" \"], () => {\n    console.log(\"no solar\");\n    fileData[index].SOLAR = false;\n    setIndex(index + 1);\n  });\n  useKeypress([\"y\", \"Enter\"], () => {\n    console.log(\"setting has solar\");\n    fileData[index].SOLAR = true;\n    setIndex(index + 1);\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Solar determiner</h1>\n      <h2>Press 'Enter' if the home has solar and 'space' if it doesn't</h2>\n      {index < 0 && (\n        <input type=\"file\" name=\"file\" onChange={loadFile} required />\n      )}\n      {index !== -1 && index < fileData.length && (\n        <>\n          <br />\n          <p>\n            {fileData[index]?.ADDRESS}\n            <br />\n            {fileData[index]?.CITY}, {fileData[index]?.STATE}{\" \"}\n            {fileData[index]?.ZIP}\n          </p>\n          <img src={apiUrl} alt=\"A home\" />\n        </>\n      )}\n      {index > -1 && (\n        <div>\n          <br />\n          <button onClick={downloadResults}>Download</button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}